services:
  db:
    image: postgres:16-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - post-app-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER}"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - post-app-network
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py createsuperuser --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/health/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "4200:80"
    networks:
      - post-app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  postgres_data:

networks:
  post-app-network:
    driver: bridge
